---
title: Functional Blogging in Haskell with Hakyll, Part 1
tags: Hakyll, Haskell, Open Source
---

<img src="/images/haskell.png" style="float:left;margin:0 5px 0 0;" />
[Hakyll](http://jaspervdj.be/hakyll/) is a static site generator written in [Haskell](http://haskell.org) and similar in spirit to Ruby's [Jekyll](http://jekyllrb.com/) and Python's [Pelican](http://docs.getpelican.com/en/3.1.1/).  The Haskell code, HTML templates, and JavaScript and CSS files used by Hakyll to generate this blog are open source and available on [GitHub](http://github.com/AustinRochford/blog) under the [MIT License](http://opensource.org/licenses/MIT).  This series of posts covers the concepts necessary to understand how Hakyll builds this blog.

I recommend installing Hakyll from [Hackage](http://hackage.haskell.org/packages/hackage.html) using [cabal](http://www.haskell.org/cabal/).  While many Linux distributions have Hakyll packages in their software repositories, these packages are often several versions behind the current release.  For example, the curretn version of Hakyll is 4.2.0.0, while the [package](http://packages.ubuntu.com/quantal/haskell/libghc-hakyll-dev) available in Ubuntu Quantal's repositories is 3.2.7.2. *These posts are specifically targeted to Hakyll 4.2.0.0.*

The rest of this post discusses a toy example to illustrate the main Hakyll concepts in a simple context.  The subsequent posts in this series will discuss the specifics of this blog.  The three files used in this example, `contents.mkd`, `site.hs`, and `template.html` are available in [example.tar.gz](/resources/functional-blogging/example.tar.gz).

The file `contents.mkd` is shown below.

```
---
title: This is the title.
---

This is the body.
```

If you're unfamiliar with [markdown](http://johnmacfarlane.net/pandoc/demo/example9/pandocs-markdown.html), take a moment to familiarize yourself with it.  It is an easy to read and write format that can be readily transformed into HTML.  When Hakyll compiles `contents.mkd` with [Pandoc](http://johnmacfarlane.net/pandoc/), the first part of the file, between the `---` lines, sets the `title` field in this file's [context](http://jaspervdj.be/hakyll/reference/Hakyll-Web-Template-Context.html) to "This is the title.".  The text after the second `---` line is transformed to HTML and then stored as the `body` field in this file's context.  The context of a file is the data type that allows Hakyll to merge information from a file into an HTML template to form a webpage.

The file `template.html` is shown below.

``` html
<html>
    <head>
        <title>$title$</title>
    </head>
    <body>
        <h1>$title$</h1>

        $body$
    </body>
</html>
```

When Hakyll applies this template to a file, such as `contents.mkd`, every piece of text of the form `$field$` is replaced by the field `field` from the file's context.

Finally, we arrive at `site.hs`, whose contents are shown below.

``` haskell
{-# LANGUAGE OverloadedStrings #-}
import Hakyll

main :: IO ()
main = hakyll $ do
    match "contents.mkd" $ do
        route $ constRoute "index.html"
        compile $ pandocCompiler
            >>= loadAndApplyTemplate "template.html" defaultContext

    match "template.html" $ compile templateCompiler
```

We'll go through this file line-by-line to understand how Hakyll generates our site.

The type of the function `hakyll` is `Rules a -> IO ()`; that is, it takes some rules for generating our site, and returns the `IO` action that generates it.  There are many different functions in [Hakyll.Core.Rules](http://jaspervdj.be/hakyll/reference/Hakyll-Core-Rules.html) for building rules to construct the site.

$\frac{2}{3}$
